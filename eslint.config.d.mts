declare namespace _default {
    export let ignores: string[];
    let _extends: string[];
    export { _extends as extends };
    export let plugins: string[];
    export { tsParser as parser };
    export namespace parserOptions {
        let ecmaVersion: number;
        let sourceType: string;
        let project: string;
    }
    export namespace env {
        let node: boolean;
        let jest: boolean;
    }
    export let globals: {
        afterAll: false;
        afterEach: false;
        beforeAll: false;
        beforeEach: false;
        describe: false;
        expect: false;
        fdescribe: false;
        fit: false;
        it: false;
        jest: false;
        pit: false;
        require: false;
        test: false;
        xdescribe: false;
        xit: false;
        xtest: false;
        __dirname: false;
        __filename: false;
        AbortController: false;
        AbortSignal: false;
        atob: false;
        Blob: false;
        BroadcastChannel: false;
        btoa: false;
        Buffer: false;
        ByteLengthQueuingStrategy: false;
        clearImmediate: false;
        clearInterval: false;
        clearTimeout: false;
        CompressionStream: false;
        console: false;
        CountQueuingStrategy: false;
        crypto: false;
        Crypto: false;
        CryptoKey: false;
        CustomEvent: false;
        DecompressionStream: false;
        DOMException: false;
        Event: false;
        EventTarget: false;
        exports: true;
        fetch: false;
        File: false;
        FormData: false;
        global: false;
        Headers: false;
        Intl: false;
        MessageChannel: false;
        MessageEvent: false;
        MessagePort: false;
        module: false;
        performance: false;
        PerformanceEntry: false;
        PerformanceMark: false;
        PerformanceMeasure: false;
        PerformanceObserver: false;
        PerformanceObserverEntryList: false;
        PerformanceResourceTiming: false;
        process: false;
        queueMicrotask: false;
        ReadableByteStreamController: false;
        ReadableStream: false;
        ReadableStreamBYOBReader: false;
        ReadableStreamBYOBRequest: false;
        ReadableStreamDefaultController: false;
        ReadableStreamDefaultReader: false;
        Request: false;
        Response: false;
        setImmediate: false;
        setInterval: false;
        setTimeout: false;
        structuredClone: false;
        SubtleCrypto: false;
        TextDecoder: false;
        TextDecoderStream: false;
        TextEncoder: false;
        TextEncoderStream: false;
        TransformStream: false;
        TransformStreamDefaultController: false;
        URL: false;
        URLSearchParams: false;
        WebAssembly: false;
        WritableStream: false;
        WritableStreamDefaultController: false;
        WritableStreamDefaultWriter: false;
    };
    export let rules: {
        '@typescript-eslint/no-explicit-any': string;
        '@typescript-eslint/no-floating-promises': string;
        '@typescript-eslint/no-unsafe-argument': string;
    };
}
export default _default;
import tsParser from '@typescript-eslint/parser';
